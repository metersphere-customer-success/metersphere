<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="io.metersphere.db.mapper.ext.ExtDataRulesNodeMapper">

    <select id="getCountNodes" resultType="io.metersphere.dto.DataRulesNodeDTO">
        select tpn.id, count(*) as caseNum
        from data_rules
        left join data_rules_node tpn on data_rules.node_id = tpn.id
        left join project on tpn.project_id = project.id
        left join schedule ON schedule.resource_id = data_rules.id
        <include refid="queryWhereCondition"/>
        group by tpn.id
    </select>

    <select id="getNodeTreeByProjectId" resultType="io.metersphere.dto.DataRulesNodeDTO">
        select
            id, project_id, `name`, parent_id, `level`, create_time, update_time, pos, create_user
        from data_rules_node tpn
        where tpn.project_id = #{projectId}
        order by pos
    </select>

    <select id="getNode" resultType="io.metersphere.dto.DataRulesNodeDTO">
        select
            id, project_id, `name`, parent_id, `level`, create_time, update_time, pos, create_user
        from data_rules_node
        where id = #{id}
    </select>

    <update id="updatePos">
        update data_rules_node set pos = #{pos} where id = #{id}
    </update>

    <resultMap id="BaseResultMap" type="io.metersphere.dto.DataRulesNode"
               extends="io.metersphere.db.mapper.DataRulesNodeMapper.BaseResultMap">
        <result column="project_name" property="projectName" jdbcType="VARCHAR"/>
        <result column="user_name" property="userName" jdbcType="VARCHAR"/>
    </resultMap>

    <sql id="condition">
        <choose>
            <when test='${object}.operator == "like"'>
                like CONCAT('%', #{${object}.value},'%')
            </when>
            <when test='${object}.operator == "not like"'>
                not like CONCAT('%', #{${object}.value},'%')
            </when>
            <when test='${object}.operator == "in"'>
                in
                <foreach collection="${object}.value" item="v" separator="," open="(" close=")">
                    #{v}
                </foreach>
            </when>
            <when test='${object}.operator == "not in"'>
                not in
                <foreach collection="${object}.value" item="v" separator="," open="(" close=")">
                    #{v}
                </foreach>
            </when>
            <when test='${object}.operator == "between"'>
                between #{${object}.value[0]} and #{${object}.value[1]}
            </when>
            <when test='${object}.operator == "gt"'>
                &gt; #{${object}.value}
            </when>
            <when test='${object}.operator == "lt"'>
                &lt; #{${object}.value}
            </when>
            <when test='${object}.operator == "ge"'>
                &gt;= #{${object}.value}
            </when>
            <when test='${object}.operator == "le"'>
                &lt;= #{${object}.value}
            </when>
            <when test='${object}.operator == "current user"'>
                = '${@io.metersphere.commons.utils.SessionUtils@getUserId()}'
            </when>
            <otherwise>
                = #{${object}.value}
            </otherwise>
        </choose>
    </sql>

    <sql id="combine">
        <if test='${condition}.name != null and (${name} == null or ${name} == "")'>
            and data_rules.name
            <include refid="condition">
                <property name="object" value="${condition}.name"/>
            </include>
        </if>

        <if test="${condition}.projectName != null">
            and project.name
            <include refid="condition">
                <property name="object" value="${condition}.projectName"/>
            </include>
        </if>
        <if test="${condition}.createTime != null">
            and data_rules.create_time
            <include refid="condition">
                <property name="object" value="${condition}.createTime"/>
            </include>
        </if>


        <if test="${condition}.updateTime != null">
            and data_rules.update_time
            <include refid="condition">
                <property name="object" value="${condition}.updateTime"/>
            </include>
        </if>



        <if test="${condition}.moduleIds != null">
            and data_rules.node_id
            <include refid="io.metersphere.base.mapper.ext.ExtBaseMapper.condition">
                <property name="object" value="${condition}.moduleIds"/>
            </include>
        </if>
    </sql>

    <sql id="queryWhereCondition">
        <where>
            <if test="request.combine != null">
                <include refid="combine">
                    <property name="condition" value="request.combine"/>
                    <property name="name" value="request.name"/>
                </include>
            </if>
            <if test="request.name != null">
                and data_rules.name like CONCAT('%', #{request.name},'%')
            </if>
            <if test="request.workspaceId != null">
                AND data_rules.workspace_id = #{request.workspaceId}
            </if>
            <if test="request.projectId != null">
                AND data_rules.project_id = #{request.projectId}
            </if>
            <if test="request.id != null">
                AND data_rules.id = #{request.id}
            </if>
        </where>
    </sql>

    <sql id="filter">
        <if test="request.filters != null and request.filters.size() > 0">
            <foreach collection="request.filters.entrySet()" index="key" item="values">
                <if test="values != null and values.size() > 0">
                    <choose>
                        <when test="key=='status'">
                            <choose>
                                <when test="request.executorOrPrincipal != null">
                                    and (( data_rules_principal.principal_id =
                                    '${@io.metersphere.commons.utils.SessionUtils@getUserId()}' and
                                    data_rules.status in
                                    <include refid="io.metersphere.base.mapper.ext.ExtBaseMapper.filterInWrapper"/>
                                    )
                                    or
                                    (data_rules_test_case.executor =
                                    '${@io.metersphere.commons.utils.SessionUtils@getUserId()}' and
                                    data_rules_test_case.status in
                                    <include refid="io.metersphere.base.mapper.ext.ExtBaseMapper.filterInWrapper"/>
                                    ))
                                    and (data_rules.status is null or data_rules.status != 'Trash')
                                    and (test_case.status is null or test_case.status != 'Trash')
                                </when>
                                <otherwise>
                                    and data_rules.status in
                                    <include refid="io.metersphere.base.mapper.ext.ExtBaseMapper.filterInWrapper"/>
                                </otherwise>
                            </choose>
                        </when>
                        <otherwise>
                            <choose>
                                <when test="key=='stage'">
                                    and data_rules.stage in
                                    <include refid="io.metersphere.base.mapper.ext.ExtBaseMapper.filterInWrapper"/>
                                </when>
                                <when test="key=='create_user'">
                                    and data_rules.creator in
                                    <include refid="io.metersphere.base.mapper.ext.ExtBaseMapper.filterInWrapper"/>
                                </when>
                                <when test="key=='schedule_status'">
                                    and
                                    <foreach collection="values" item="value" separator="or" open="(" close=")">
                                        <if test="value == 'OPEN'">
                                            schedule.`enable` = 1
                                        </if>
                                        <if test="value == 'SHUT'">
                                            schedule.`enable` = 0
                                        </if>
                                        <if test="value == 'NOTSET' ">
                                            schedule.id is null
                                        </if>
                                    </foreach>
                                </when>
                            </choose>
                            and data_rules.status != 'Archived'
                        </otherwise>
                    </choose>
                </if>
                <if test="(values == null or values.size() == 0) and request.filters.get('status') == null">
                    and data_rules.status != 'Archived'
                </if>
            </foreach>
        </if>
    </sql>
</mapper>
